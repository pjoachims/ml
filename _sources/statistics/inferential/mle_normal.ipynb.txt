{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example: linear model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Homoscedastic errors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Assumed model\n",
    "Assuming a linear model:\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "    y_i &= \\mathbf{x}_i \\beta + \\epsilon_i \\quad \\text{i.i.d.} \\\\\n",
    "    \\mathbf{y} &= \\mathbf{X} \\beta + \\mathbf{\\epsilon} \\\\\n",
    "\\end{align}\n",
    "$$\n",
    "with normally distributed errors $\\epsilon_i \\sim \\mathcal{N}(0, \\sigma^2)$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data generation\n",
    "\n",
    "We first generate data for 100 random datapoints with $x \\in [-5, 5]$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 2.73956049, -0.6112156 ,  3.5859792 ,  1.97368029, -4.05822652,\n",
       "        4.75622352,  2.61139702,  2.86064305, -3.71886367, -0.49614062])"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N = 100\n",
    "rng = np.random.default_rng(42)\n",
    "x = rng.random(N) * 10 - 5\n",
    "x[: 10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this example, we set\n",
    "- $\\beta = 2$\n",
    "- $\\sigma = 2.5$\n",
    "\n",
    "$$\n",
    "y_i = 2x_i + \\epsilon_i, \\quad \\epsilon_i \\sim \\mathcal{N}(0, 2.5^2)\n",
    "$$\n",
    "\n",
    "and generate the response data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x18f772084c0>]"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "beta = 2\n",
    "sigma = 2.5\n",
    "\n",
    "eps = rng.normal(scale=sigma, size=x.shape)\n",
    "y = x * beta + eps\n",
    "\n",
    "plt.plot(x, y, \"x\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Estimation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Likelihood function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## References, Further reading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "matplotlib: 3.5.1\n",
      "sys       : 3.8.5 (default, Sep  3 2020, 21:29:08) [MSC v.1916 64 bit (AMD64)]\n",
      "numpy     : 1.21.2\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# %load_ext watermark\n",
    "%watermark -iv "
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "a010474af4e729c5b25d0b6f57bdb05db0edd92c7816e4c04318ac3f6709cba8"
  },
  "kernelspec": {
   "display_name": "Python 3.8.5 64-bit ('ml': conda)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
